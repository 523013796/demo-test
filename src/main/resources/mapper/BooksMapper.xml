<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zl.demotest.dao.book.BooksDao" >
  <resultMap id="BaseResultMap" type="com.zl.demotest.pojo.book.Books" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DOUBLE" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="buytime" property="buytime" jdbcType="DATE" />
    <result column="numberremaining" property="numberremaining" jdbcType="INTEGER" />
    <result column="number" property="number" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.zl.demotest.pojo.book.Books" extends="BaseResultMap" >
    <result column="introduce" property="introduce" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, author, price, type, buytime, numberremaining, number
  </sql>
  <sql id="Blob_Column_List" >
    introduce
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from books
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="getAllBooks" resultMap="BaseResultMap" >
    select * from books
  </select>
  <select id="selectLike" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from books
    where id like #{key}
    or name like #{key}
    or author like #{key}
    or type like #{key}
    or introduce like #{key}
  </select>
  <select id="selectByKey" resultMap="BaseResultMap">
    select * from books where ${key} = #{value}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from books
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zl.demotest.pojo.book.Books" >
    insert into books (id, name, author, 
      price, type, buytime, numberremaining, 
      number, introduce)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{price,jdbcType=DOUBLE}, #{type,jdbcType=INTEGER}, #{buytime,jdbcType=DATE}, #{numberremaining,jdbcType=INTEGER}, 
      #{number,jdbcType=INTEGER}, #{introduce,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zl.demotest.pojo.book.Books" >
    insert into books
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="author != null" >
        author,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="buytime != null" >
        buytime,
      </if>
      <if test="numberremaining != null" >
        numberremaining,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="introduce != null" >
        introduce,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="buytime != null" >
        #{buytime,jdbcType=DATE},
      </if>
      <if test="numberremaining != null" >
        #{numberremaining,jdbcType=INTEGER},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="introduce != null" >
        #{introduce,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zl.demotest.pojo.book.Books" >
    update books
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="buytime != null" >
        buytime = #{buytime,jdbcType=DATE},
      </if>
      <if test="numberremaining != null" >
        numberremaining = #{numberremaining,jdbcType=INTEGER},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="introduce != null" >
        introduce = #{introduce,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zl.demotest.pojo.book.Books" >
    update books
    set name = #{name,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      type = #{type,jdbcType=INTEGER},
      buytime = #{buytime,jdbcType=DATE},
      numberremaining = #{numberremaining,jdbcType=INTEGER},
      number = #{number,jdbcType=INTEGER},
      introduce = #{introduce,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zl.demotest.pojo.book.Books" >
    update books
    set name = #{name,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      type = #{type,jdbcType=INTEGER},
      buytime = #{buytime,jdbcType=DATE},
      numberremaining = #{numberremaining,jdbcType=INTEGER},
      number = #{number,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateNumberRemainingAddOne">
     UPDATE
  `mangeteam`.`books`
SET

  `numberremaining` = `numberremaining`+1
WHERE `id` = #{id}
  </update>
</mapper>